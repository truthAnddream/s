<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
       引入数据库的配置文件信息
    -->
    <context:property-placeholder location="classpath:db.properties" />

    <!--
        设置druid数据源
    -->
    <bean id="ds" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${url}" />
        <property name="driverClassName" value="${driver}" />
        <property name="username" value="root" />
        <property name="password" value="zty199320" />
    </bean>

    <!--
        SqlSessionFactoryBean，将mybatis交给spring来管理
    -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sf">
        <!--设置包的别名-->
        <property name="typeAliasesPackage" value="com.qf.pojo" />

        <!--mapperLocations映射文件的位置-->
        <property name="mapperLocations" value="classpath:Dao/*Mapper.xml" />
        <property name="dataSource" ref="ds" />
        <!--额外任何关于mybatis的配置都可以在该文件中进行单独的配置-->
        <property name="configLocation" value="classpath:mybatis.xml" />
    </bean>

    <!--
        MapperScannerConfigurer配置映射扫描配置，分别设置SqlSessionFactoryBean的name以及basePackage对于dao包进行扫描
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.qf.dao" />
        <property name="sqlSessionFactoryBeanName" value="sf" />
    </bean>

    <!--
        DataSourceTransactionManager配置数据源的事务管理器
    -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="dtx">
        <property name="dataSource" ref="ds" />
    </bean>

    <!--
        声明式事务的配置
            设置事务的隔离级别以及出问题之后的处理方式
    -->
    <tx:advice transaction-manager="dtx" id="tx">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" />
            <tx:method name="insert*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" />
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception" />
        </tx:attributes>
    </tx:advice>

    <!--aop：config设置aop的配置-->
    <aop:config>
        <aop:pointcut id="mpt" expression="execution(* com.qf.service.*.*(..))" />
        <aop:advisor advice-ref="tx" pointcut-ref="mpt" />
    </aop:config>
</beans>